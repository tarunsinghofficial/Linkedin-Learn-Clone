{"version":3,"sources":["../src/getConfig.ts"],"names":["isMissingFileCode","code","includes","readConfigFile","configFile","context","error","isConfigError","stack","Error","getDynamicConfig","configPath","request","config","ConfigError","getStaticConfig","JsonFile","read","json5"],"mappings":";;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA,SAASA,iBAAT,CAA2BC,IAA3B,EAAkD;AAChD,SAAO,CAAC,QAAD,EAAW,kBAAX,EAA+B,SAA/B,EAA0CC,QAA1C,CAAmDD,IAAnD,CAAP;AACD,C,CAED;AACA;;;AACA,SAASE,cAAT,CAAwBC,UAAxB,EAA4CC,OAA5C,EAAiG;AAC/F,MAAI;AACF,WAAO,8BAAWD,UAAX,EAAuBC,OAAvB,CAAP;AACD,GAFD,CAEE,OAAOC,KAAP,EAAc;AACd;AACA,QAAI,CAACN,iBAAiB,CAACM,KAAK,CAACL,IAAP,CAAtB,EAAoC;AAClC;AACAK,MAAAA,KAAK,CAACC,aAAN,GAAsB,IAAtB,CAFkC,CAGlC;;AACAD,MAAAA,KAAK,CAACE,KAAN,GAAc,IAAIC,KAAJ,GAAYD,KAA1B;AACA,YAAMF,KAAN;AACD;AACF;;AACD,SAAO,IAAP;AACD;;AAEM,SAASI,gBAAT,CAA0BC,UAA1B,EAA8CC,OAA9C,EAA4F;AACjG,QAAMC,MAAM,GAAGV,cAAc,CAACQ,UAAD,EAAaC,OAAb,CAA7B;;AACA,MAAIC,MAAJ,EAAY;AACV;AACA,WAAOA,MAAP;AACD,GALgG,CAMjG;AACA;;;AACA,QAAM,KAAIC,qBAAJ,EAAiB,6BAA4BH,UAAW,EAAxD,EAA2D,gBAA3D,CAAN;AACD;;AAEM,SAASI,eAAT,CAAyBJ,UAAzB,EAAyE;AAC9E,QAAME,MAAM,GAAGG,oBAASC,IAAT,CAAcN,UAAd,EAA0B;AAAEO,IAAAA,KAAK,EAAE;AAAT,GAA1B,CAAf;;AACA,MAAIL,MAAJ,EAAY;AACV,WAAOA,MAAP;AACD;;AACD,QAAM,KAAIC,qBAAJ,EAAiB,6BAA4BH,UAAW,EAAxD,EAA2D,gBAA3D,CAAN;AACD","sourcesContent":["import JsonFile from '@expo/json-file';\n\nimport { AppJSONConfig, ConfigContext, ExpoConfig } from './Config.types';\nimport { ConfigError } from './Errors';\nimport { DynamicConfigResults, evalConfig } from './evalConfig';\n\nfunction isMissingFileCode(code: string): boolean {\n  return ['ENOENT', 'MODULE_NOT_FOUND', 'ENOTDIR'].includes(code);\n}\n\n// We cannot use async config resolution right now because Next.js doesn't support async configs.\n// If they don't add support for async Webpack configs then we may need to pull support for Next.js.\nfunction readConfigFile(configFile: string, context: ConfigContext): null | DynamicConfigResults {\n  try {\n    return evalConfig(configFile, context);\n  } catch (error) {\n    // If the file doesn't exist then we should skip it and continue searching.\n    if (!isMissingFileCode(error.code)) {\n      // @ts-ignore\n      error.isConfigError = true;\n      // @ts-ignore: Replace the babel stack with a more relevant stack.\n      error.stack = new Error().stack;\n      throw error;\n    }\n  }\n  return null;\n}\n\nexport function getDynamicConfig(configPath: string, request: ConfigContext): DynamicConfigResults {\n  const config = readConfigFile(configPath, request);\n  if (config) {\n    // The config must be serialized and evaluated ahead of time so the spawned process can send it over.\n    return config;\n  }\n  // TODO: It seems this is only thrown if the file cannot be found (which may never happen).\n  // If so we should throw a more helpful error.\n  throw new ConfigError(`Failed to read config at: ${configPath}`, 'INVALID_CONFIG');\n}\n\nexport function getStaticConfig(configPath: string): AppJSONConfig | ExpoConfig {\n  const config = JsonFile.read(configPath, { json5: true });\n  if (config) {\n    return config as any;\n  }\n  throw new ConfigError(`Failed to read config at: ${configPath}`, 'INVALID_CONFIG');\n}\n"],"file":"getConfig.js"}