{"version":3,"sources":["../../src/plugins/withConfigPlugins.ts"],"names":["withConfigPlugins","config","Array","isArray","plugins","length"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,iBAA+B,GAAGC,MAAM,IAAI;AAAA;;AACvD;AACA,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,MAAM,CAACG,OAArB,CAAD,IAAkC,qBAACH,MAAM,CAACG,OAAR,4CAAC,gBAAgBC,MAAjB,CAAtC,EAA+D;AAC7D,WAAOJ,MAAP;AACD,GAJsD,CAKvD;AACA;;;AACAA,EAAAA,MAAM,GAAG,kCAAYA,MAAZ,EAAoBA,MAAM,CAACG,OAA3B,CAAT,CAPuD,CAQvD;;AACA,SAAO,8CAA4BH,MAA5B,CAAP;AACD,CAVM","sourcesContent":["import { ConfigPlugin, withPlugins } from '@expo/config-plugins';\n\nimport { serializeAfterStaticPlugins } from '../Serialize';\n\n/**\n * Resolves static plugins array as config plugin functions.\n *\n * @param config\n * @param projectRoot\n */\nexport const withConfigPlugins: ConfigPlugin = config => {\n  // @ts-ignore: plugins not on config type yet -- TODO\n  if (!Array.isArray(config.plugins) || !config.plugins?.length) {\n    return config;\n  }\n  // Resolve and evaluate plugins\n  // @ts-ignore: TODO: add plugins to the config schema\n  config = withPlugins(config, config.plugins);\n  // plugins aren't serialized by default, serialize the plugins after resolving them.\n  return serializeAfterStaticPlugins(config);\n};\n"],"file":"withConfigPlugins.js"}