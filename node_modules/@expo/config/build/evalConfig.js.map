{"version":3,"sources":["../src/evalConfig.ts"],"names":["evalConfig","configFile","request","babel","require","code","transformFileSync","cwd","projectRoot","process","babelrc","comments","ignore","filename","presets","result","resolveConfigExport","default","exportedObjectType","Promise","ConfigError","expo","config"],"mappings":";;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AANA;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,UAAT,CACLC,UADK,EAELC,OAFK,EAGiB;AACtB,QAAMC,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAAWF,KAAK,CAACG,iBAAN,CAAwBL,UAAxB,EAAoC;AACnD;AACAM,IAAAA,GAAG,EAAE,CAAAL,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEM,WAAT,KAAwBC,OAAO,CAACF,GAAR,EAFsB;AAGnDG,IAAAA,OAAO,EAAE,KAH0C;AAInDT,IAAAA,UAAU,EAAE,KAJuC;AAKnDU,IAAAA,QAAQ,EAAE,KALyC;AAMnDC,IAAAA,MAAM,EAAE,CAAC,cAAD,CAN2C;AAOnDC,IAAAA,QAAQ,EAAE,SAPyC;AAQnDC,IAAAA,OAAO,EAAE,CAAC,uCAAD;AAR0C,GAApC,CAAjB;AAWA,QAAMC,MAAM,GAAG,kCAAcV,IAAd,EAAoBJ,UAApB,CAAf;AACA,SAAOe,mBAAmB,CAACD,MAAD,EAASd,UAAT,EAAqBC,OAArB,CAA1B;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASc,mBAAT,CACLD,MADK,EAELd,UAFK,EAGLC,OAHK,EAIL;AAAA;;AACA,MAAIa,MAAM,CAACE,OAAP,IAAkB,IAAtB,EAA4B;AAC1BF,IAAAA,MAAM,GAAGA,MAAM,CAACE,OAAhB;AACD;;AACD,QAAMC,kBAAkB,GAAG,OAAOH,MAAlC;;AACA,MAAI,OAAOA,MAAP,KAAkB,UAAtB,EAAkC;AAChCA,IAAAA,MAAM,GAAGA,MAAM,CAACb,OAAD,CAAf;AACD;;AAED,MAAIa,MAAM,YAAYI,OAAtB,EAA+B;AAC7B,UAAM,KAAIC,qBAAJ,EAAiB,eAAcnB,UAAW,2BAA1C,EAAsE,gBAAtE,CAAN;AACD,GAXD,CAaA;;;AACA,iBAAIc,MAAJ,oCAAI,QAAQM,IAAZ,EAAkB;AAChBN,IAAAA,MAAM,GAAG,wCAAsBA,MAAM,CAACM,IAA7B,CAAT;AACD,GAFD,MAEO;AACLN,IAAAA,MAAM,GAAG,wCAAsBA,MAAtB,CAAT;AACD;;AAED,SAAO;AAAEO,IAAAA,MAAM,EAAEP,MAAV;AAAkBG,IAAAA;AAAlB,GAAP;AACD","sourcesContent":["// @ts-ignore\nimport requireString from 'require-from-string';\n\nimport { AppJSONConfig, ConfigContext, ExpoConfig } from './Config.types';\nimport { ConfigError } from './Errors';\nimport { serializeSkippingMods } from './Serialize';\nimport { getBabelPreset } from './getBabelPreset';\n// import babel from '@babel/core';\n\ntype RawDynamicConfig = AppJSONConfig | Partial<ExpoConfig> | null;\n\nexport type DynamicConfigResults = { config: RawDynamicConfig; exportedObjectType: string };\n\n/**\n * Transpile and evaluate the dynamic config object.\n * This method is shared between the standard reading method in getConfig, and the headless script.\n *\n * @param options configFile path to the dynamic app.config.*, request to send to the dynamic config if it exports a function.\n * @returns the serialized and evaluated config along with the exported object type (object or function).\n */\nexport function evalConfig(\n  configFile: string,\n  request: ConfigContext | null\n): DynamicConfigResults {\n  const babel = require('@babel/core');\n\n  const { code } = babel.transformFileSync(configFile, {\n    // only: [configFile],\n    cwd: request?.projectRoot || process.cwd(),\n    babelrc: false,\n    configFile: false,\n    comments: false,\n    ignore: [/node_modules/],\n    filename: 'unknown',\n    presets: [getBabelPreset()],\n  });\n\n  const result = requireString(code, configFile);\n  return resolveConfigExport(result, configFile, request);\n}\n\n/**\n * - Resolve the exported contents of an Expo config (be it default or module.exports)\n * - Assert no promise exports\n * - Return config type\n * - Serialize config\n *\n * @param result\n * @param configFile\n * @param request\n */\nexport function resolveConfigExport(\n  result: any,\n  configFile: string,\n  request: ConfigContext | null\n) {\n  if (result.default != null) {\n    result = result.default;\n  }\n  const exportedObjectType = typeof result;\n  if (typeof result === 'function') {\n    result = result(request);\n  }\n\n  if (result instanceof Promise) {\n    throw new ConfigError(`Config file ${configFile} cannot return a Promise.`, 'INVALID_CONFIG');\n  }\n\n  // If the expo object exists, ignore all other values.\n  if (result?.expo) {\n    result = serializeSkippingMods(result.expo);\n  } else {\n    result = serializeSkippingMods(result);\n  }\n\n  return { config: result, exportedObjectType };\n}\n"],"file":"evalConfig.js"}