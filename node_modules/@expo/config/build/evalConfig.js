"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.evalConfig = evalConfig;
exports.resolveConfigExport = resolveConfigExport;

function _requireFromString() {
  const data = _interopRequireDefault(require("require-from-string"));

  _requireFromString = function () {
    return data;
  };

  return data;
}

function _Errors() {
  const data = require("./Errors");

  _Errors = function () {
    return data;
  };

  return data;
}

function _Serialize() {
  const data = require("./Serialize");

  _Serialize = function () {
    return data;
  };

  return data;
}

function _getBabelPreset() {
  const data = require("./getBabelPreset");

  _getBabelPreset = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// @ts-ignore

/**
 * Transpile and evaluate the dynamic config object.
 * This method is shared between the standard reading method in getConfig, and the headless script.
 *
 * @param options configFile path to the dynamic app.config.*, request to send to the dynamic config if it exports a function.
 * @returns the serialized and evaluated config along with the exported object type (object or function).
 */
function evalConfig(configFile, request) {
  const babel = require('@babel/core');

  const {
    code
  } = babel.transformFileSync(configFile, {
    // only: [configFile],
    cwd: (request === null || request === void 0 ? void 0 : request.projectRoot) || process.cwd(),
    babelrc: false,
    configFile: false,
    comments: false,
    ignore: [/node_modules/],
    filename: 'unknown',
    presets: [(0, _getBabelPreset().getBabelPreset)()]
  });
  const result = (0, _requireFromString().default)(code, configFile);
  return resolveConfigExport(result, configFile, request);
}
/**
 * - Resolve the exported contents of an Expo config (be it default or module.exports)
 * - Assert no promise exports
 * - Return config type
 * - Serialize config
 *
 * @param result
 * @param configFile
 * @param request
 */


function resolveConfigExport(result, configFile, request) {
  var _result;

  if (result.default != null) {
    result = result.default;
  }

  const exportedObjectType = typeof result;

  if (typeof result === 'function') {
    result = result(request);
  }

  if (result instanceof Promise) {
    throw new (_Errors().ConfigError)(`Config file ${configFile} cannot return a Promise.`, 'INVALID_CONFIG');
  } // If the expo object exists, ignore all other values.


  if ((_result = result) !== null && _result !== void 0 && _result.expo) {
    result = (0, _Serialize().serializeSkippingMods)(result.expo);
  } else {
    result = (0, _Serialize().serializeSkippingMods)(result);
  }

  return {
    config: result,
    exportedObjectType
  };
}
//# sourceMappingURL=evalConfig.js.map