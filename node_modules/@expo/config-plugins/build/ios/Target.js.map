{"version":3,"sources":["../../src/ios/Target.ts"],"names":["TargetType","findApplicationTargetWithDependenciesAsync","projectRoot","scheme","applicationTargetName","project","applicationTarget","findNativeTargetByName","dependencies","map","value","target","targetId","getPBXGroupByKeyAndType","findNativeTargetById","type","isTargetOfType","EXTENSION","OTHER","name","APPLICATION","targetType","productType","getNativeTargets","section","pbxNativeTargetSection","Object","entries","filter","isNotComment","findSignableTargets","targets","applicationTargets","STICKER_PACK_EXTENSION","length","Error","findFirstNativeTarget","targetName","nativeTargets","nativeTargetEntry","find","i","key"],"mappings":"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","sourcesContent":["import { PBXNativeTarget, PBXTargetDependency, XcodeProject } from 'xcode';\n\nimport { getApplicationTargetNameForSchemeAsync } from './BuildScheme';\nimport { getPbxproj, isNotComment, NativeTargetSectionEntry } from './utils/Xcodeproj';\n\nexport enum TargetType {\n  APPLICATION = 'com.apple.product-type.application',\n  EXTENSION = 'com.apple.product-type.app-extension',\n  STICKER_PACK_EXTENSION = 'com.apple.product-type.app-extension.messages-sticker-pack',\n  OTHER = 'other',\n}\n\nexport interface Target {\n  name: string;\n  type: TargetType;\n  dependencies?: Target[];\n}\n\nexport async function findApplicationTargetWithDependenciesAsync(\n  projectRoot: string,\n  scheme: string\n): Promise<Target> {\n  const applicationTargetName = await getApplicationTargetNameForSchemeAsync(projectRoot, scheme);\n  const project = getPbxproj(projectRoot);\n  const [, applicationTarget] = findNativeTargetByName(project, applicationTargetName);\n\n  const dependencies: Target[] = applicationTarget.dependencies.map(({ value }) => {\n    const { target: targetId } = project.getPBXGroupByKeyAndType(\n      value,\n      'PBXTargetDependency'\n    ) as PBXTargetDependency;\n\n    const [, target] = findNativeTargetById(project, targetId);\n\n    const type = isTargetOfType(target, TargetType.EXTENSION)\n      ? TargetType.EXTENSION\n      : TargetType.OTHER;\n    return {\n      name: target.name,\n      type,\n    };\n  });\n\n  return {\n    name: applicationTarget.name,\n    type: TargetType.APPLICATION,\n    dependencies,\n  };\n}\n\nexport function isTargetOfType(target: PBXNativeTarget, targetType: TargetType): boolean {\n  return target.productType === targetType || target.productType === `\"${targetType}\"`;\n}\n\nexport function getNativeTargets(project: XcodeProject): NativeTargetSectionEntry[] {\n  const section = project.pbxNativeTargetSection();\n  return Object.entries(section).filter(isNotComment);\n}\n\nexport function findSignableTargets(project: XcodeProject): NativeTargetSectionEntry[] {\n  const targets = getNativeTargets(project);\n  const applicationTargets = targets.filter(\n    ([, target]) =>\n      isTargetOfType(target, TargetType.APPLICATION) ||\n      isTargetOfType(target, TargetType.EXTENSION) ||\n      isTargetOfType(target, TargetType.STICKER_PACK_EXTENSION)\n  );\n  if (applicationTargets.length === 0) {\n    throw new Error(`Could not find any signable targets in project.pbxproj`);\n  }\n  return applicationTargets;\n}\n\nexport function findFirstNativeTarget(project: XcodeProject): NativeTargetSectionEntry {\n  const targets = getNativeTargets(project);\n  const applicationTargets = targets.filter(([, target]) =>\n    isTargetOfType(target, TargetType.APPLICATION)\n  );\n  if (applicationTargets.length === 0) {\n    throw new Error(`Could not find any application target in project.pbxproj`);\n  }\n  return applicationTargets[0];\n}\n\nexport function findNativeTargetByName(\n  project: XcodeProject,\n  targetName: string\n): NativeTargetSectionEntry {\n  const nativeTargets = getNativeTargets(project);\n  const nativeTargetEntry = nativeTargets.find(\n    ([, i]) => i.name === targetName || i.name === `\"${targetName}\"`\n  );\n  if (!nativeTargetEntry) {\n    throw new Error(`Could not find target '${targetName}' in project.pbxproj`);\n  }\n  return nativeTargetEntry;\n}\n\nfunction findNativeTargetById(project: XcodeProject, targetId: string): NativeTargetSectionEntry {\n  const nativeTargets = getNativeTargets(project);\n  const nativeTargetEntry = nativeTargets.find(([key]) => key === targetId);\n  if (!nativeTargetEntry) {\n    throw new Error(`Could not find target with id '${targetId}' in project.pbxproj`);\n  }\n  return nativeTargetEntry;\n}\n"],"file":"Target.js"}