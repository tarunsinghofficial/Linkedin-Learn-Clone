{"version":3,"sources":["../../src/android/Updates.ts"],"names":["CREATE_MANIFEST_ANDROID_PATH","Config","withUpdates","config","expoUsername","modResults","setUpdatesConfig","getUpdateUrl","username","user","owner","slug","getRuntimeVersion","runtimeVersion","getSDKVersion","sdkVersion","getUpdatesEnabled","updates","enabled","getUpdatesTimeout","fallbackToCacheTimeout","getUpdatesCheckOnLaunch","checkAutomatically","androidManifest","mainApplication","ENABLED","String","CHECK_ON_LAUNCH","LAUNCH_WAIT_MS","updateUrl","UPDATE_URL","setVersionsConfig","SDK_VERSION","RUNTIME_VERSION","ensureBuildGradleContainsConfigurationScript","projectRoot","buildGradleContents","isBuildGradleConfigured","cleanedUpBuildGradleContents","isBuildGradleMisconfigured","split","some","line","includes","replace","RegExp","gradleScriptApply","formatApplyLineForBuildGradle","updatesGradleScriptPath","resolveFrom","silent","Error","relativePath","path","relative","join","posixPath","process","platform","androidBuildScript","isMainApplicationMetaDataSet","Boolean","isMainApplicationMetaDataSynced","areVersionsSynced","expectedRuntimeVersion","expectedSdkVersion","currentRuntimeVersion","currentSdkVersion"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAndroidManifest } from '../plugins/android-plugins';\nimport {\n  addMetaDataItemToMainApplication,\n  AndroidManifest,\n  getMainApplicationMetaDataValue,\n  getMainApplicationOrThrow,\n  removeMetaDataItemFromMainApplication,\n} from './Manifest';\n\nconst CREATE_MANIFEST_ANDROID_PATH = 'expo-updates/scripts/create-manifest-android.gradle';\n\ntype ExpoConfigUpdates = Pick<\n  ExpoConfig,\n  'sdkVersion' | 'owner' | 'runtimeVersion' | 'updates' | 'slug'\n>;\n\nexport enum Config {\n  ENABLED = 'expo.modules.updates.ENABLED',\n  CHECK_ON_LAUNCH = 'expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH',\n  LAUNCH_WAIT_MS = 'expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS',\n  SDK_VERSION = 'expo.modules.updates.EXPO_SDK_VERSION',\n  RUNTIME_VERSION = 'expo.modules.updates.EXPO_RUNTIME_VERSION',\n  UPDATE_URL = 'expo.modules.updates.EXPO_UPDATE_URL',\n  RELEASE_CHANNEL = 'expo.modules.updates.EXPO_RELEASE_CHANNEL',\n  UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY = 'expo.modules.updates.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY',\n}\n\nexport const withUpdates: ConfigPlugin<{ expoUsername: string | null }> = (\n  config,\n  { expoUsername }\n) => {\n  return withAndroidManifest(config, config => {\n    config.modResults = setUpdatesConfig(config, config.modResults, expoUsername);\n    return config;\n  });\n};\n\nexport function getUpdateUrl(\n  config: Pick<ExpoConfigUpdates, 'owner' | 'slug'>,\n  username: string | null\n): string | null {\n  const user = typeof config.owner === 'string' ? config.owner : username;\n  if (!user) {\n    return null;\n  }\n  return `https://exp.host/@${user}/${config.slug}`;\n}\n\nexport function getRuntimeVersion(\n  config: Pick<ExpoConfigUpdates, 'runtimeVersion'>\n): string | null {\n  return typeof config.runtimeVersion === 'string' ? config.runtimeVersion : null;\n}\n\nexport function getSDKVersion(config: Pick<ExpoConfigUpdates, 'sdkVersion'>): string | null {\n  return typeof config.sdkVersion === 'string' ? config.sdkVersion : null;\n}\n\nexport function getUpdatesEnabled(config: Pick<ExpoConfigUpdates, 'updates'>): boolean {\n  return config.updates?.enabled !== false;\n}\n\nexport function getUpdatesTimeout(config: Pick<ExpoConfigUpdates, 'updates'>): number {\n  return config.updates?.fallbackToCacheTimeout ?? 0;\n}\n\nexport function getUpdatesCheckOnLaunch(\n  config: Pick<ExpoConfigUpdates, 'updates'>\n): 'NEVER' | 'ALWAYS' {\n  if (config.updates?.checkAutomatically === 'ON_ERROR_RECOVERY') {\n    return 'NEVER';\n  } else if (config.updates?.checkAutomatically === 'ON_LOAD') {\n    return 'ALWAYS';\n  }\n  return 'ALWAYS';\n}\n\nexport function setUpdatesConfig(\n  config: ExpoConfigUpdates,\n  androidManifest: AndroidManifest,\n  username: string | null\n): AndroidManifest {\n  const mainApplication = getMainApplicationOrThrow(androidManifest);\n\n  addMetaDataItemToMainApplication(\n    mainApplication,\n    Config.ENABLED,\n    String(getUpdatesEnabled(config))\n  );\n  addMetaDataItemToMainApplication(\n    mainApplication,\n    Config.CHECK_ON_LAUNCH,\n    getUpdatesCheckOnLaunch(config)\n  );\n  addMetaDataItemToMainApplication(\n    mainApplication,\n    Config.LAUNCH_WAIT_MS,\n    String(getUpdatesTimeout(config))\n  );\n\n  const updateUrl = getUpdateUrl(config, username);\n  if (updateUrl) {\n    addMetaDataItemToMainApplication(mainApplication, Config.UPDATE_URL, updateUrl);\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.UPDATE_URL);\n  }\n\n  return setVersionsConfig(config, androidManifest);\n}\n\nexport function setVersionsConfig(\n  config: Pick<ExpoConfigUpdates, 'sdkVersion' | 'runtimeVersion'>,\n  androidManifest: AndroidManifest\n): AndroidManifest {\n  const mainApplication = getMainApplicationOrThrow(androidManifest);\n\n  const runtimeVersion = getRuntimeVersion(config);\n  const sdkVersion = getSDKVersion(config);\n  if (runtimeVersion) {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.SDK_VERSION);\n    addMetaDataItemToMainApplication(mainApplication, Config.RUNTIME_VERSION, runtimeVersion);\n  } else if (sdkVersion) {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.RUNTIME_VERSION);\n    addMetaDataItemToMainApplication(mainApplication, Config.SDK_VERSION, sdkVersion);\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.RUNTIME_VERSION);\n    removeMetaDataItemFromMainApplication(mainApplication, Config.SDK_VERSION);\n  }\n\n  return androidManifest;\n}\nexport function ensureBuildGradleContainsConfigurationScript(\n  projectRoot: string,\n  buildGradleContents: string\n): string {\n  if (!isBuildGradleConfigured(projectRoot, buildGradleContents)) {\n    let cleanedUpBuildGradleContents;\n\n    const isBuildGradleMisconfigured = buildGradleContents\n      .split('\\n')\n      .some(line => line.includes(CREATE_MANIFEST_ANDROID_PATH));\n    if (isBuildGradleMisconfigured) {\n      cleanedUpBuildGradleContents = buildGradleContents.replace(\n        new RegExp(`(\\n// Integration with Expo updates)?\\n.*${CREATE_MANIFEST_ANDROID_PATH}.*\\n`),\n        ''\n      );\n    } else {\n      cleanedUpBuildGradleContents = buildGradleContents;\n    }\n\n    const gradleScriptApply = formatApplyLineForBuildGradle(projectRoot);\n    return `${cleanedUpBuildGradleContents}\\n// Integration with Expo updates\\n${gradleScriptApply}\\n`;\n  } else {\n    return buildGradleContents;\n  }\n}\n\nexport function formatApplyLineForBuildGradle(projectRoot: string): string {\n  const updatesGradleScriptPath = resolveFrom.silent(projectRoot, CREATE_MANIFEST_ANDROID_PATH);\n\n  if (!updatesGradleScriptPath) {\n    throw new Error(\n      \"Could not find the build script for Android. This could happen in case of outdated 'node_modules'. Run 'npm install' to make sure that it's up-to-date.\"\n    );\n  }\n\n  const relativePath = path.relative(\n    path.join(projectRoot, 'android', 'app'),\n    updatesGradleScriptPath\n  );\n  const posixPath = process.platform === 'win32' ? relativePath.replace(/\\\\/g, '/') : relativePath;\n\n  return `apply from: \"${posixPath}\"`;\n}\n\nexport function isBuildGradleConfigured(projectRoot: string, buildGradleContents: string): boolean {\n  const androidBuildScript = formatApplyLineForBuildGradle(projectRoot);\n\n  return (\n    buildGradleContents\n      .replace(/\\r\\n/g, '\\n')\n      .split('\\n')\n      // Check for both single and double quotes\n      .some(line => line === androidBuildScript || line === androidBuildScript.replace(/\"/g, \"'\"))\n  );\n}\n\nexport function isMainApplicationMetaDataSet(androidManifest: AndroidManifest): boolean {\n  const updateUrl = getMainApplicationMetaDataValue(androidManifest, Config.UPDATE_URL);\n  const runtimeVersion = getMainApplicationMetaDataValue(androidManifest, Config.RUNTIME_VERSION);\n  const sdkVersion = getMainApplicationMetaDataValue(androidManifest, Config.SDK_VERSION);\n\n  return Boolean(updateUrl && (sdkVersion || runtimeVersion));\n}\n\nexport function isMainApplicationMetaDataSynced(\n  config: ExpoConfigUpdates,\n  androidManifest: AndroidManifest,\n  username: string | null\n): boolean {\n  return (\n    getUpdateUrl(config, username) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.UPDATE_URL) &&\n    String(getUpdatesEnabled(config)) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.ENABLED) &&\n    String(getUpdatesTimeout(config)) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.LAUNCH_WAIT_MS) &&\n    getUpdatesCheckOnLaunch(config) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.CHECK_ON_LAUNCH) &&\n    areVersionsSynced(config, androidManifest)\n  );\n}\n\nexport function areVersionsSynced(\n  config: Pick<ExpoConfigUpdates, 'runtimeVersion' | 'sdkVersion'>,\n  androidManifest: AndroidManifest\n): boolean {\n  const expectedRuntimeVersion = getRuntimeVersion(config);\n  const expectedSdkVersion = getSDKVersion(config);\n  const currentRuntimeVersion = getMainApplicationMetaDataValue(\n    androidManifest,\n    Config.RUNTIME_VERSION\n  );\n  const currentSdkVersion = getMainApplicationMetaDataValue(androidManifest, Config.SDK_VERSION);\n\n  return (\n    currentRuntimeVersion === expectedRuntimeVersion && currentSdkVersion === expectedSdkVersion\n  );\n}\n"],"file":"Updates.js"}