{"version":3,"sources":["../../src/plugins/withAndroidBaseMods.ts"],"names":["readFile","writeFile","promises","defaultProviders","dangerous","getFilePath","read","filePath","modResults","write","manifest","modRequest","platformProjectRoot","path","join","Manifest","readAndroidManifestAsync","writeAndroidManifestAsync","gradleProperties","Properties","parsePropertiesFile","propertiesListToString","strings","projectRoot","Strings","getProjectStringsXMLPathAsync","Resources","readResourcesXMLAsync","xml","colors","Colors","getProjectColorsXMLPathAsync","colorsNight","kind","styles","Styles","getProjectStylesXMLPathAsync","fallback","resources","$","projectBuildGradle","Paths","getProjectBuildGradleFilePath","getFileInfo","contents","settingsGradle","getSettingsGradleFilePath","appBuildGradle","getAppBuildGradleFilePath","mainActivity","getProjectFilePath","withAndroidBaseMods","config","providers","props","platform","getAndroidModFileProviders","getAndroidIntrospectModFileProviders","createIntrospectionProvider","modName","fallbackContents","realProvider","Function","package","android","application","activity","action","category"],"mappings":"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","sourcesContent":["import { promises } from 'fs';\nimport path from 'path';\n\nimport { ExportedConfig, ModConfig } from '../Plugin.types';\nimport { Colors, Manifest, Paths, Properties, Resources, Strings, Styles } from '../android';\nimport { writeXMLAsync } from '../utils/XML';\nimport { ForwardedBaseModOptions, provider, withGeneratedBaseMods } from './createBaseMod';\n\nconst { readFile, writeFile } = promises;\n\ntype AndroidModName = keyof Required<ModConfig>['android'];\n\nconst defaultProviders = {\n  dangerous: provider<unknown>({\n    getFilePath() {\n      return '';\n    },\n    async read() {\n      return { filePath: '', modResults: {} };\n    },\n    async write() {},\n  }),\n\n  // Append a rule to supply gradle.properties data to mods on `mods.android.gradleProperties`\n  manifest: provider<Manifest.AndroidManifest>({\n    getFilePath({ modRequest: { platformProjectRoot } }) {\n      return path.join(platformProjectRoot, 'app/src/main/AndroidManifest.xml');\n    },\n    async read(filePath) {\n      return await Manifest.readAndroidManifestAsync(filePath);\n    },\n    async write(filePath, { modResults }) {\n      await Manifest.writeAndroidManifestAsync(filePath, modResults);\n    },\n  }),\n\n  // Append a rule to supply gradle.properties data to mods on `mods.android.gradleProperties`\n  gradleProperties: provider<Properties.PropertiesItem[]>({\n    getFilePath({ modRequest: { platformProjectRoot } }) {\n      return path.join(platformProjectRoot, 'gradle.properties');\n    },\n    async read(filePath) {\n      return Properties.parsePropertiesFile(await readFile(filePath, 'utf8'));\n    },\n    async write(filePath, { modResults }) {\n      await writeFile(filePath, Properties.propertiesListToString(modResults));\n    },\n  }),\n\n  // Append a rule to supply strings.xml data to mods on `mods.android.strings`\n  strings: provider<Resources.ResourceXML>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Strings.getProjectStringsXMLPathAsync(projectRoot);\n    },\n    async read(filePath) {\n      return Resources.readResourcesXMLAsync({ path: filePath });\n    },\n    async write(filePath, { modResults }) {\n      await writeXMLAsync({ path: filePath, xml: modResults });\n    },\n  }),\n\n  colors: provider<Resources.ResourceXML>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Colors.getProjectColorsXMLPathAsync(projectRoot);\n    },\n    async read(filePath) {\n      return Resources.readResourcesXMLAsync({ path: filePath });\n    },\n    async write(filePath, { modResults }) {\n      await writeXMLAsync({ path: filePath, xml: modResults });\n    },\n  }),\n\n  colorsNight: provider<Resources.ResourceXML>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Colors.getProjectColorsXMLPathAsync(projectRoot, { kind: 'values-night' });\n    },\n    async read(filePath) {\n      return Resources.readResourcesXMLAsync({ path: filePath });\n    },\n    async write(filePath, { modResults }) {\n      await writeXMLAsync({ path: filePath, xml: modResults });\n    },\n  }),\n\n  styles: provider<Resources.ResourceXML>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Styles.getProjectStylesXMLPathAsync(projectRoot);\n    },\n    async read(filePath) {\n      // Adds support for `tools:x`\n      const styles = await Resources.readResourcesXMLAsync({\n        path: filePath,\n        fallback: `<?xml version=\"1.0\" encoding=\"utf-8\"?><resources xmlns:tools=\"http://schemas.android.com/tools\"></resources>`,\n      });\n\n      // Ensure support for tools is added...\n      if (!styles.resources.$) {\n        styles.resources.$ = {};\n      }\n      if (!styles.resources.$?.['xmlns:tools']) {\n        styles.resources.$['xmlns:tools'] = 'http://schemas.android.com/tools';\n      }\n      return styles;\n    },\n    async write(filePath, { modResults }) {\n      await writeXMLAsync({ path: filePath, xml: modResults });\n    },\n  }),\n\n  projectBuildGradle: provider<Paths.GradleProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getProjectBuildGradleFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n\n  settingsGradle: provider<Paths.GradleProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getSettingsGradleFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n\n  appBuildGradle: provider<Paths.GradleProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getAppBuildGradleFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n\n  mainActivity: provider<Paths.ApplicationProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getProjectFilePath(projectRoot, 'MainActivity');\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n};\n\ntype AndroidDefaultProviders = typeof defaultProviders;\n\nexport function withAndroidBaseMods(\n  config: ExportedConfig,\n  {\n    providers,\n    ...props\n  }: ForwardedBaseModOptions & { providers?: Partial<AndroidDefaultProviders> } = {}\n): ExportedConfig {\n  return withGeneratedBaseMods<AndroidModName>(config, {\n    ...props,\n    platform: 'android',\n    providers: providers ?? getAndroidModFileProviders(),\n  });\n}\n\nexport function getAndroidModFileProviders() {\n  return defaultProviders;\n}\n\nexport function getAndroidIntrospectModFileProviders(): Omit<\n  AndroidDefaultProviders,\n  // Get rid of mods that could potentially fail by being empty.\n  'dangerous' | 'projectBuildGradle' | 'settingsGradle' | 'appBuildGradle' | 'mainActivity'\n> {\n  const createIntrospectionProvider = (\n    modName: keyof typeof defaultProviders,\n    { fallbackContents }: { fallbackContents: any }\n  ) => {\n    const realProvider = defaultProviders[modName];\n    return provider<any>({\n      async getFilePath(...props) {\n        try {\n          return await realProvider.getFilePath(...props);\n        } catch {\n          // fallback to an empty string in introspection mode.\n          return '';\n        }\n      },\n      async read(...props) {\n        try {\n          return await realProvider.read(...props);\n        } catch {\n          // fallback if a file is missing in introspection mode.\n          if (fallbackContents instanceof Function) {\n            return fallbackContents(...props);\n          }\n          return fallbackContents;\n        }\n      },\n      async write() {\n        // write nothing in introspection mode.\n      },\n    });\n  };\n\n  // dangerous should never be added\n  return {\n    manifest: createIntrospectionProvider('manifest', {\n      fallbackContents(filePath: string, config: ExportedConfig) {\n        return {\n          manifest: {\n            $: {\n              'xmlns:android': 'http://schemas.android.com/apk/res/android',\n              package: config.android?.package ?? 'com.placeholder.appid',\n            },\n            'uses-permission': [\n              {\n                $: {\n                  'android:name': 'android.permission.INTERNET',\n                },\n              },\n            ],\n            application: [\n              {\n                $: {\n                  'android:name': '.MainApplication',\n                  'android:label': '@string/app_name',\n                  'android:icon': '@mipmap/ic_launcher',\n                  'android:roundIcon': '@mipmap/ic_launcher_round',\n                  'android:allowBackup': 'false',\n                  'android:theme': '@style/AppTheme',\n                },\n                activity: [\n                  {\n                    $: {\n                      'android:name': '.MainActivity',\n                      'android:label': '@string/app_name',\n                      'android:configChanges':\n                        'keyboard|keyboardHidden|orientation|screenSize|uiMode',\n                      'android:launchMode': 'singleTask',\n                      'android:windowSoftInputMode': 'adjustResize',\n                      'android:theme': '@style/Theme.App.SplashScreen',\n                    },\n                    'intent-filter': [\n                      {\n                        action: [\n                          {\n                            $: {\n                              'android:name': 'android.intent.action.MAIN',\n                            },\n                          },\n                        ],\n                        category: [\n                          {\n                            $: {\n                              'android:name': 'android.intent.category.LAUNCHER',\n                            },\n                          },\n                        ],\n                      },\n                    ],\n                  },\n                  {\n                    $: {\n                      'android:name': 'com.facebook.react.devsupport.DevSettingsActivity',\n                    },\n                  },\n                ],\n              },\n            ],\n          },\n        } as Manifest.AndroidManifest;\n      },\n    }),\n    gradleProperties: createIntrospectionProvider('gradleProperties', { fallbackContents: [] }),\n    strings: createIntrospectionProvider('strings', {\n      fallbackContents: { resources: {} } as Resources.ResourceXML,\n    }),\n    colors: createIntrospectionProvider('colors', {\n      fallbackContents: { resources: {} } as Resources.ResourceXML,\n    }),\n    colorsNight: createIntrospectionProvider('colorsNight', {\n      fallbackContents: { resources: {} } as Resources.ResourceXML,\n    }),\n    styles: createIntrospectionProvider('styles', {\n      fallbackContents: { resources: {} } as Resources.ResourceXML,\n    }),\n    // projectBuildGradle: createIntrospectionProvider('projectBuildGradle', {\n    //   fallbackContents: { path: '', contents: '', language: 'groovy' } as Paths.GradleProjectFile,\n    // }),\n    // settingsGradle: createIntrospectionProvider('settingsGradle', {\n    //   fallbackContents: { path: '', contents: '', language: 'groovy' } as Paths.GradleProjectFile,\n    // }),\n    // appBuildGradle: createIntrospectionProvider('appBuildGradle', {\n    //   fallbackContents: { path: '', contents: '', language: 'groovy' } as Paths.GradleProjectFile,\n    // }),\n    // mainActivity: createIntrospectionProvider('mainActivity', {\n    //   fallbackContents: {\n    //     path: '',\n    //     contents: '',\n    //     language: 'java',\n    //   } as Paths.ApplicationProjectFile,\n    // }),\n  };\n}\n"],"file":"withAndroidBaseMods.js"}