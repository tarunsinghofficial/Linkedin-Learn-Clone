{"version":3,"sources":["NativeStackView.tsx"],"names":["getHeaderTitle","Header","HeaderBackButton","SafeAreaProviderCompat","Screen","React","Image","StyleSheet","View","NativeStackView","state","descriptors","styles","container","routes","map","route","i","isFocused","index","canGoBack","previousKey","key","previousDescriptor","undefined","options","navigation","render","header","headerShown","headerTintColor","headerBackImageSource","headerLeft","headerRight","headerTitle","headerTitleStyle","headerStyle","headerShadowVisible","headerTransparent","contentStyle","back","title","name","tintColor","backImage","goBack","children","position","backgroundColor","shadowOpacity","borderBottomWidth","absoluteFill","display","create","flex","height","width","margin","resizeMode"],"mappings":"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","sourcesContent":["import {\n  getHeaderTitle,\n  Header,\n  HeaderBackButton,\n  SafeAreaProviderCompat,\n  Screen,\n} from '@react-navigation/elements';\nimport type {\n  ParamListBase,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { Image, StyleSheet, View } from 'react-native';\n\nimport type {\n  NativeStackDescriptorMap,\n  NativeStackNavigationHelpers,\n} from '../types';\n\ntype Props = {\n  state: StackNavigationState<ParamListBase>;\n  // This is used for the native implementation of the stack.\n  // eslint-disable-next-line react/no-unused-prop-types\n  navigation: NativeStackNavigationHelpers;\n  descriptors: NativeStackDescriptorMap;\n};\n\nexport default function NativeStackView({ state, descriptors }: Props) {\n  return (\n    <SafeAreaProviderCompat>\n      <View style={styles.container}>\n        {state.routes.map((route, i) => {\n          const isFocused = state.index === i;\n          const canGoBack = i !== 0;\n          const previousKey = state.routes[i - 1]?.key;\n          const previousDescriptor = previousKey\n            ? descriptors[previousKey]\n            : undefined;\n          const { options, navigation, render } = descriptors[route.key];\n\n          const {\n            header,\n            headerShown,\n            headerTintColor,\n            headerBackImageSource,\n            headerLeft,\n            headerRight,\n            headerTitle,\n            headerTitleStyle,\n            headerStyle,\n            headerShadowVisible,\n            headerTransparent,\n            contentStyle,\n          } = options;\n\n          return (\n            <Screen\n              key={route.key}\n              focused={isFocused}\n              route={route}\n              navigation={navigation}\n              headerShown={headerShown}\n              header={\n                header !== undefined ? (\n                  header({\n                    back: previousDescriptor\n                      ? {\n                          title: getHeaderTitle(\n                            previousDescriptor.options,\n                            previousDescriptor.route.name\n                          ),\n                        }\n                      : undefined,\n                    options,\n                    route,\n                    navigation,\n                  })\n                ) : (\n                  <Header\n                    title={getHeaderTitle(options, route.name)}\n                    headerTintColor={headerTintColor}\n                    headerLeft={\n                      typeof headerLeft === 'function'\n                        ? ({ tintColor }) => headerLeft({ tintColor })\n                        : headerLeft === undefined && canGoBack\n                        ? ({ tintColor }) => (\n                            <HeaderBackButton\n                              tintColor={tintColor}\n                              backImage={\n                                headerBackImageSource !== undefined\n                                  ? () => (\n                                      <Image\n                                        source={headerBackImageSource}\n                                        style={[\n                                          styles.backImage,\n                                          { tintColor },\n                                        ]}\n                                      />\n                                    )\n                                  : undefined\n                              }\n                              onPress={navigation.goBack}\n                              canGoBack={canGoBack}\n                            />\n                          )\n                        : headerLeft\n                    }\n                    headerRight={\n                      typeof headerRight === 'function'\n                        ? ({ tintColor }) => headerRight({ tintColor })\n                        : headerRight\n                    }\n                    headerTitle={\n                      typeof headerTitle === 'function'\n                        ? ({ children, tintColor }) =>\n                            headerTitle({ children, tintColor })\n                        : headerTitle\n                    }\n                    headerTitleStyle={headerTitleStyle}\n                    headerStyle={[\n                      headerTransparent\n                        ? {\n                            position: 'absolute',\n                            backgroundColor: 'transparent',\n                          }\n                        : null,\n                      headerStyle,\n                      headerShadowVisible === false\n                        ? { shadowOpacity: 0, borderBottomWidth: 0 }\n                        : null,\n                    ]}\n                  />\n                )\n              }\n              style={[\n                StyleSheet.absoluteFill,\n                { display: isFocused ? 'flex' : 'none' },\n              ]}\n            >\n              <View style={contentStyle}>{render()}</View>\n            </Screen>\n          );\n        })}\n      </View>\n    </SafeAreaProviderCompat>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  backImage: {\n    height: 24,\n    width: 24,\n    margin: 3,\n    resizeMode: 'contain',\n  },\n});\n"]}