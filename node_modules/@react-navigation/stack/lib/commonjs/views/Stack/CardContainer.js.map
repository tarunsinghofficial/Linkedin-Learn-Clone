{"version":3,"sources":["CardContainer.tsx"],"names":["EPSILON","CardContainer","interpolationIndex","index","active","closing","gesture","focused","modal","getPreviousScene","getFocusedRoute","headerDarkContent","hasAbsoluteFloatHeader","headerHeight","onHeaderHeightChange","isParentHeaderShown","isNextScreenTransparent","detachCurrentScreen","layout","onCloseRoute","onOpenRoute","onGestureCancel","onGestureEnd","onGestureStart","onTransitionEnd","onTransitionStart","renderHeader","renderScene","safeAreaInsetBottom","safeAreaInsetLeft","safeAreaInsetRight","safeAreaInsetTop","scene","parentHeaderHeight","React","useContext","HeaderHeightContext","onPageChangeStart","onPageChangeCancel","onPageChangeConfirm","useCallback","options","navigation","descriptor","isFocused","keyboardHandlingEnabled","handleOpen","route","handleClose","handleGestureBegin","handleGestureCanceled","handleGestureEnd","handleTransition","insets","top","right","bottom","left","colors","pointerEvents","setPointerEvents","useState","useEffect","listener","progress","next","addListener","value","removeListener","presentation","animationEnabled","cardOverlay","cardOverlayEnabled","cardShadowEnabled","cardStyle","cardStyleInterpolator","gestureDirection","gestureEnabled","gestureResponseDistance","gestureVelocityImpact","headerMode","headerShown","transitionSpec","previousScene","backTitle","name","headerBack","useMemo","undefined","title","current","marginTop","backgroundColor","background","overflow","display","StyleSheet","absoluteFill","styles","container","mode","scenes","onContentHeightChange","memo","create","flex","flexDirection"],"mappings":"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","sourcesContent":["import {\n  getHeaderTitle,\n  HeaderBackContext,\n  HeaderHeightContext,\n  HeaderShownContext,\n} from '@react-navigation/elements';\nimport { Route, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport { Animated, StyleSheet, View } from 'react-native';\n\nimport type { Layout, Scene } from '../../types';\nimport ModalPresentationContext from '../../utils/ModalPresentationContext';\nimport useKeyboardManager from '../../utils/useKeyboardManager';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport Card from './Card';\n\ntype Props = {\n  interpolationIndex: number;\n  index: number;\n  active: boolean;\n  focused: boolean;\n  closing: boolean;\n  modal: boolean;\n  layout: Layout;\n  gesture: Animated.Value;\n  scene: Scene;\n  headerDarkContent: boolean | undefined;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  getPreviousScene: (props: { route: Route<string> }) => Scene | undefined;\n  getFocusedRoute: () => Route<string>;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onGestureStart: (props: { route: Route<string> }) => void;\n  onGestureEnd: (props: { route: Route<string> }) => void;\n  onGestureCancel: (props: { route: Route<string> }) => void;\n  hasAbsoluteFloatHeader: boolean;\n  headerHeight: number;\n  onHeaderHeightChange: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  isParentHeaderShown: boolean;\n  isNextScreenTransparent: boolean;\n  detachCurrentScreen: boolean;\n};\n\nconst EPSILON = 0.1;\n\nfunction CardContainer({\n  interpolationIndex,\n  index,\n  active,\n  closing,\n  gesture,\n  focused,\n  modal,\n  getPreviousScene,\n  getFocusedRoute,\n  headerDarkContent,\n  hasAbsoluteFloatHeader,\n  headerHeight,\n  onHeaderHeightChange,\n  isParentHeaderShown,\n  isNextScreenTransparent,\n  detachCurrentScreen,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onGestureCancel,\n  onGestureEnd,\n  onGestureStart,\n  onTransitionEnd,\n  onTransitionStart,\n  renderHeader,\n  renderScene,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n}: Props) {\n  const parentHeaderHeight = React.useContext(HeaderHeightContext);\n\n  const { onPageChangeStart, onPageChangeCancel, onPageChangeConfirm } =\n    useKeyboardManager(\n      React.useCallback(() => {\n        const { options, navigation } = scene.descriptor;\n\n        return (\n          navigation.isFocused() && options.keyboardHandlingEnabled !== false\n        );\n      }, [scene.descriptor])\n    );\n\n  const handleOpen = () => {\n    const { route } = scene.descriptor;\n\n    onTransitionEnd({ route }, false);\n    onOpenRoute({ route });\n  };\n\n  const handleClose = () => {\n    const { route } = scene.descriptor;\n\n    onTransitionEnd({ route }, true);\n    onCloseRoute({ route });\n  };\n\n  const handleGestureBegin = () => {\n    const { route } = scene.descriptor;\n\n    onPageChangeStart();\n    onGestureStart({ route });\n  };\n\n  const handleGestureCanceled = () => {\n    const { route } = scene.descriptor;\n\n    onPageChangeCancel();\n    onGestureCancel({ route });\n  };\n\n  const handleGestureEnd = () => {\n    const { route } = scene.descriptor;\n\n    onGestureEnd({ route });\n  };\n\n  const handleTransition = ({\n    closing,\n    gesture,\n  }: {\n    closing: boolean;\n    gesture: boolean;\n  }) => {\n    const { route } = scene.descriptor;\n\n    if (!gesture) {\n      onPageChangeConfirm?.(true);\n    } else if (active && closing) {\n      onPageChangeConfirm?.(false);\n    } else {\n      onPageChangeCancel?.();\n    }\n\n    onTransitionStart?.({ route }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft,\n  };\n\n  const { colors } = useTheme();\n\n  const [pointerEvents, setPointerEvents] =\n    React.useState<'box-none' | 'none'>('box-none');\n\n  React.useEffect(() => {\n    const listener = scene.progress.next?.addListener?.(\n      ({ value }: { value: number }) => {\n        setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n      }\n    );\n\n    return () => {\n      if (listener) {\n        scene.progress.next?.removeListener?.(listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n\n  const {\n    presentation,\n    animationEnabled,\n    cardOverlay,\n    cardOverlayEnabled,\n    cardShadowEnabled,\n    cardStyle,\n    cardStyleInterpolator,\n    gestureDirection,\n    gestureEnabled,\n    gestureResponseDistance,\n    gestureVelocityImpact,\n    headerMode,\n    headerShown,\n    transitionSpec,\n  } = scene.descriptor.options;\n\n  const previousScene = getPreviousScene({ route: scene.descriptor.route });\n\n  let backTitle: string | undefined;\n\n  if (previousScene) {\n    const { options, route } = previousScene.descriptor;\n\n    backTitle = getHeaderTitle(options, route.name);\n  }\n\n  const headerBack = React.useMemo(\n    () => (backTitle !== undefined ? { title: backTitle } : undefined),\n    [backTitle]\n  );\n\n  return (\n    <Card\n      modal={modal}\n      interpolationIndex={interpolationIndex}\n      gestureDirection={gestureDirection}\n      layout={layout}\n      insets={insets}\n      gesture={gesture}\n      current={scene.progress.current}\n      next={scene.progress.next}\n      closing={closing}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      overlay={cardOverlay}\n      overlayEnabled={cardOverlayEnabled}\n      shadowEnabled={cardShadowEnabled}\n      onTransition={handleTransition}\n      onGestureBegin={handleGestureBegin}\n      onGestureCanceled={handleGestureCanceled}\n      onGestureEnd={handleGestureEnd}\n      gestureEnabled={index === 0 ? false : gestureEnabled}\n      gestureResponseDistance={gestureResponseDistance}\n      gestureVelocityImpact={gestureVelocityImpact}\n      transitionSpec={transitionSpec}\n      styleInterpolator={cardStyleInterpolator}\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      pointerEvents={active ? 'box-none' : pointerEvents}\n      pageOverflowEnabled={headerMode !== 'float' && presentation !== 'modal'}\n      headerDarkContent={headerDarkContent}\n      containerStyle={\n        hasAbsoluteFloatHeader && headerMode !== 'screen'\n          ? { marginTop: headerHeight }\n          : null\n      }\n      contentStyle={[\n        {\n          backgroundColor:\n            presentation === 'transparentModal'\n              ? 'transparent'\n              : colors.background,\n        },\n        cardStyle,\n      ]}\n      style={[\n        {\n          // This is necessary to avoid unfocused larger pages increasing scroll area\n          // The issue can be seen on the web when a smaller screen is pushed over a larger one\n          overflow: active ? undefined : 'hidden',\n          display:\n            // Hide unfocused screens when animation isn't enabled\n            // This is also necessary for a11y on web\n            animationEnabled === false &&\n            isNextScreenTransparent === false &&\n            detachCurrentScreen !== false &&\n            !focused\n              ? 'none'\n              : 'flex',\n        },\n        StyleSheet.absoluteFill,\n      ]}\n    >\n      <View style={styles.container}>\n        <View style={styles.scene}>\n          <HeaderBackContext.Provider value={headerBack}>\n            <HeaderShownContext.Provider\n              value={isParentHeaderShown || headerShown !== false}\n            >\n              <HeaderHeightContext.Provider\n                value={headerShown ? headerHeight : parentHeaderHeight ?? 0}\n              >\n                {renderScene({ route: scene.descriptor.route })}\n              </HeaderHeightContext.Provider>\n            </HeaderShownContext.Provider>\n          </HeaderBackContext.Provider>\n        </View>\n        {headerMode !== 'float' ? (\n          <ModalPresentationContext.Provider value={modal}>\n            {renderHeader({\n              mode: 'screen',\n              layout,\n              scenes: [previousScene, scene],\n              getPreviousScene,\n              getFocusedRoute,\n              onContentHeightChange: onHeaderHeightChange,\n            })}\n          </ModalPresentationContext.Provider>\n        ) : null}\n      </View>\n    </Card>\n  );\n}\n\nexport default React.memo(CardContainer);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"]}