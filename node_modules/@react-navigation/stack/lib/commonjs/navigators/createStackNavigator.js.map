{"version":3,"sources":["createStackNavigator.tsx"],"names":["StackNavigator","initialRouteName","children","screenListeners","screenOptions","rest","mode","headerMode","state","descriptors","navigation","NavigationContent","StackRouter","defaultScreenOptions","presentation","headerShown","undefined","React","useEffect","addListener","e","isFocused","requestAnimationFrame","index","defaultPrevented","dispatch","StackActions","popToTop","target","key"],"mappings":";;;;;;;AAAA;;AAYA;;AACA;;AAQA;;;;;;;;;;AAWA,SAASA,cAAT,CAAwB;AACtBC,EAAAA,gBADsB;AAEtBC,EAAAA,QAFsB;AAGtBC,EAAAA,eAHsB;AAItBC,EAAAA,aAJsB;AAKtB,KAAGC;AALmB,CAAxB,EAMU;AACR;AACA,QAAMC,IAAI,GAAGD,IAAI,CAACC,IAAlB,CAFQ,CAIR;;AACA,QAAMC,UAAU,GAAGF,IAAI,CAACE,UAAxB;AAEA,yBACED,IAAI,IAAI,IADV,EAEG,2BAA0BA,IAAK,yCAAwCA,IAAK,uHAF/E;AAKA,yBACEC,UAAU,KAAK,MADjB,EAEG,iMAFH;AAKA,yBACEA,UAAU,IAAI,IAAd,IAAsBA,UAAU,KAAK,MADvC,EAEG,kMAFH;AAKA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,WAAT;AAAsBC,IAAAA,UAAtB;AAAkCC,IAAAA;AAAlC,MACJ,kCAMEC,mBANF,EAMe;AACbX,IAAAA,gBADa;AAEbC,IAAAA,QAFa;AAGbC,IAAAA,eAHa;AAIbC,IAAAA,aAJa;AAKbS,IAAAA,oBAAoB,EAAE,OAAO;AAC3BC,MAAAA,YAAY,EAAER,IADa;AAE3BS,MAAAA,WAAW,EAAER,UAAU,GAAGA,UAAU,KAAK,MAAlB,GAA2B,IAFvB;AAG3BA,MAAAA,UAAU,EACRA,UAAU,IAAIA,UAAU,KAAK,MAA7B,GAAsCA,UAAtC,GAAmDS;AAJ1B,KAAP;AALT,GANf,CADF;AAoBAC,EAAAA,KAAK,CAACC,SAAN,CACE;AAAA;;AAAA,oCACER,UAAU,CAACS,WADb,0DACE,2BAAAT,UAAU,EAAe,UAAf,EAA4BU,CAAD,IAAO;AAC1C,YAAMC,SAAS,GAAGX,UAAU,CAACW,SAAX,EAAlB,CAD0C,CAG1C;AACA;;AACAC,MAAAA,qBAAqB,CAAC,MAAM;AAC1B,YACEd,KAAK,CAACe,KAAN,GAAc,CAAd,IACAF,SADA,IAEA,CAAED,CAAD,CAAkCI,gBAHrC,EAIE;AACA;AACA;AACAd,UAAAA,UAAU,CAACe,QAAX,CAAoB,EAClB,GAAGC,qBAAaC,QAAb,EADe;AAElBC,YAAAA,MAAM,EAAEpB,KAAK,CAACqB;AAFI,WAApB;AAID;AACF,OAboB,CAArB;AAcD,KAnBS,CADZ;AAAA,GADF,EAsBE,CAACnB,UAAD,EAAaF,KAAK,CAACe,KAAnB,EAA0Bf,KAAK,CAACqB,GAAhC,CAtBF;AAyBA,sBACE,oBAAC,iBAAD,qBACE,oBAAC,kBAAD,eACMxB,IADN;AAEE,IAAA,KAAK,EAAEG,KAFT;AAGE,IAAA,WAAW,EAAEC,WAHf;AAIE,IAAA,UAAU,EAAEC;AAJd,KADF,CADF;AAUD;;eAEc,oCAKbV,cALa,C","sourcesContent":["import {\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  EventArg,\n  ParamListBase,\n  StackActionHelpers,\n  StackActions,\n  StackNavigationState,\n  StackRouter,\n  StackRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\n\nimport type {\n  StackHeaderMode,\n  StackNavigationConfig,\n  StackNavigationEventMap,\n  StackNavigationOptions,\n} from '../types';\nimport StackView from '../views/Stack/StackView';\n\ntype Props = DefaultNavigatorOptions<\n  ParamListBase,\n  StackNavigationState<ParamListBase>,\n  StackNavigationOptions,\n  StackNavigationEventMap\n> &\n  StackRouterOptions &\n  StackNavigationConfig;\n\nfunction StackNavigator({\n  initialRouteName,\n  children,\n  screenListeners,\n  screenOptions,\n  ...rest\n}: Props) {\n  // @ts-expect-error: mode is deprecated\n  const mode = rest.mode as 'card' | 'modal' | undefined;\n\n  // @ts-expect-error: headerMode='none' is deprecated\n  const headerMode = rest.headerMode as StackHeaderMode | 'none' | undefined;\n\n  warnOnce(\n    mode != null,\n    `Stack Navigator: 'mode=\"${mode}\"' is deprecated. Use 'presentation: \"${mode}\"' in 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/stack-navigator#presentation for more details.`\n  );\n\n  warnOnce(\n    headerMode === 'none',\n    `Stack Navigator: 'headerMode=\"none\"' is deprecated. Use 'headerShown: false' in 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#headershown for more details.`\n  );\n\n  warnOnce(\n    headerMode != null && headerMode !== 'none',\n    `Stack Navigator: 'headerMode' is moved to 'options'. Moved it to 'screenOptions' to keep current behavior.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#headermode for more details.`\n  );\n\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      StackNavigationState<ParamListBase>,\n      StackRouterOptions,\n      StackActionHelpers<ParamListBase>,\n      StackNavigationOptions,\n      StackNavigationEventMap\n    >(StackRouter, {\n      initialRouteName,\n      children,\n      screenListeners,\n      screenOptions,\n      defaultScreenOptions: () => ({\n        presentation: mode,\n        headerShown: headerMode ? headerMode !== 'none' : true,\n        headerMode:\n          headerMode && headerMode !== 'none' ? headerMode : undefined,\n      }),\n    });\n\n  React.useEffect(\n    () =>\n      navigation.addListener?.('tabPress', (e) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <NavigationContent>\n      <StackView\n        {...rest}\n        state={state}\n        descriptors={descriptors}\n        navigation={navigation}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState<ParamListBase>,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n  typeof StackNavigator\n>(StackNavigator);\n"]}